<?php

/**
 * @file
 * Contains kalastatic.module.
 */

use Symfony\Component\Finder\Finder;
use Symfony\Component\Yaml\Parser;

/**
 * Define a list of namespaces and their paths relative to Kalastatic source.
 */
const KALASTATIC_NAMESPACES = [
  'kstat' => '',
  'kalastatic' => '',
  'atoms' => 'components/atoms',
  'molecules' => 'components/molecules',
  'organisms' => 'components/organisms',
  'layouts' => 'components/layouts',
];

/**
 * Implements hook_library_info_build().
 */
function kalastatic_library_info_build() {
  global $base_path;
  $settings = kalastatic_get_settings('yaml');
  $config = kalastatic_get_settings('config');
  $build_path = $base_path . $settings['destination'];

  // Some library metadata.
  $libraries = [];
  $libraries['css-js'] = [
    'dependencies' => [
      'core/jquery',
    ],
    'license' => [
      'name' => 'MIT',
      'url' => 'https://opensource.org/licenses/MIT',
      'gpl-compatible' => TRUE,
    ],
  ];

  // Build and array of css file paths.
  $css = [];
  foreach ($config['stylesheets'] as $css_path) {
    $css[$build_path . '/' . $css_path] = [];
  }

  // Build and array of js file paths.
  $js = [];
  foreach ($config['scripts']['footer'] as $js_path) {
    // Don't pull in the special files we built to handle Drupal compatibility
    // on the Kalastatic side.
    $disallowed = strpos($js_path, 'drupal_pre') || strpos($js_path, 'drupal_post');
    if (!$disallowed) {
      $js[$build_path . '/' . $js_path] = [];
    }
  }

  // Add the css and js to the library.
  $libraries['css-js'] += [
    'css' => [
      'theme' => $css,
    ],
    'js' => $js,
  ];
  return $libraries;
}

/**
 * Implements hook_page_attachments().
 */
function kalastatic_page_attachments(array &$attachments) {
  // Attach library to page.
  $attachments['#attached']['library'][] = 'kalastatic/css-js';
}

/**
 * Implements hook_rebuild().
 */
function kalastatic_rebuild() {
  // Warm the settings cache.
  kalastatic_get_settings();
}

/**
 * Return the default path to Kalastatic.
 *
 * The assumption is that it is inside a folder called 'kalastatic' in the
 * current default theme. This assumption is based on convention.
 */
function kalastatic_path_to_src_default() {
  $default_theme = \Drupal::config('system.theme')->get('default');
  return drupal_get_path('theme', $default_theme) . '/kalastatic';
}

/**
 * Return the path to the default build folder.
 *
 * This assumption is based on what Kalastatic does if no build path is set in
 * kalastatic.yaml file.
 */
function kalastatic_path_to_build_default() {
  return kalastatic_path_to_src_default() . '/build';
}

/**
 * Get Kalastatic settings from cache.
 *
 * Alternatively, if it doesn't exist then hit kalastatic.yaml file.
 */
function kalastatic_get_settings($type = 'yaml', $drupal_root_paths = TRUE) {
  $cid = 'kalastatic_yaml';
  $data = NULL;
  $refresh_config = FALSE;
  if ($cache = \Drupal::cache('discovery')->get($cid)) {
    // We have cache, return it now dammit!
    $data = $cache->data;
  }
  else {
    // We have no cache so hit the file system.
    $data['yaml'] = kalastatic_get_kalastatic_yaml();
    \Drupal::cache('discovery')->set($cid, $data);
  }

  $settings = [];
  switch ($type) {
    case 'yaml':
      // We're assuming most functions want paths relative to Drupal root but
      // they have the option to return the paths without manipulation--just in
      // case.
      $settings = $drupal_root_paths ? kalastatic_drupal_root_paths($data['yaml']) : $data['yaml'];
      break;

    case 'config':
      // Also referesh the config. Note that this relys on the data in
      // kalastatic.yaml so we need t make sure we have that first or we'll get
      // stuck in a loop.
      $settings = kalastatic_get_kalastatic_config($settings);
      \Drupal::cache('discovery')->set($cid, $data);
      break;
  }

  return $settings;
}

/**
 * Get Kalastatic settings from kalastatic.yaml file.
 */
function kalastatic_get_kalastatic_config($settings = []) {
  // Find Kalastatic's config.metadata file.
  $settings = empty($settings) ? kalastatic_get_settings() : $settings;
  $finder = new Finder();
  $iterator = $finder
    ->name('config.metadata')
    ->in($settings['source']);

  // This file is markdown with yaml front matter so we need to massage it a bit
  // to parse the yaml.
  $config = [];
  foreach ($iterator as $file_path => $file) {
    $yaml = new Parser();
    $file_contents = file_get_contents($file_path);
    $yaml_only = str_replace('---', '', $file_contents);
    $config = $yaml->parse($yaml_only);
  }
  return $config;
}

/**
 * Get Kalastatic settings from kalastatic.yaml file.
 */
function kalastatic_get_kalastatic_yaml() {
  // Find a kalastatic.yaml file. We start by looking 1 level higher than Drupal
  // root to handle Composer builds.
  $finder = new Finder();
  $iterator = $finder
    ->name('kalastatic.yaml')
    ->in('..');

  // Hopefully there's only one.
  $settings = [];
  foreach ($iterator as $file_path => $file) {
    $yaml = new Parser();
    $settings = $yaml->parse(file_get_contents($file_path));
  }

  // Set default paths if kalastatic.yaml doesn't have them set.
  foreach ($settings as $setting => $path) {
    if (!isset($settings['source'])) {
      $settings[$setting] = kalastatic_path_to_src_default();
    }
    if (!isset($settings['destination'])) {
      $settings[$setting] = kalastatic_path_to_build_default();
    }
  }
  return $settings;
}

/**
 * Mangle paths for Drupal.
 *
 * If we are dealing with a composer project where Drupal is nested one
 * folder deep in the project the paths defined in kalastatic.yaml will have 1
 * more arg than Drupal knows about so we need to remove it.
 */
function kalastatic_drupal_root_paths($settings) {
  $root_args = explode('/', DRUPAL_ROOT);
  $drupal_parent = end($root_args);
  $adjust = ['source', 'destination'];
  foreach ($settings as $setting => $path) {
    if (in_array($setting, $adjust)) {
      $path_args = explode('/', $path);
      $prefix = reset($path_args);
      if ($prefix == $drupal_parent) {
        // We add 1 to get rid of a preceding slash.
        $length = strlen($prefix) + 1;
        $settings[$setting] = substr($path, $length);
      }
    }
  }
  return $settings;
}
