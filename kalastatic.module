<?php
use Drupal\image\Entity\ImageStyle;

/**
 * Implements hook_library_info_build().
 */
function kalastatic_library_info_build() {
  $build_file_path = \Drupal::config('kalastatic.settings')->get('kalastatic_build_path');
  $build_path = str_replace(DRUPAL_ROOT, '', $build_file_path);

  $libraries = [];
  $libraries['kalastatic'] = [
    'dependencies' => [
      'core/jquery',
    ],
    'license' => [
      'name' => 'MIT',
      'url' => 'https://opensource.org/licenses/MIT',
      'gpl-compatible' => TRUE,
    ],
    'css' => [
      'theme' => [
        $build_path . '/styles/main.css' => [],
      ],
    ],
  ];

  // Go through all the js files in the js folder and add them as part of the
  // library.
  $js_path = $build_path . '/js';
  foreach (scandir($js_path) as $key => $filename) {
    if (preg_match('/^.*\.(js)$/i', $filename)) {
      $libraries['kalastatic']['js'][$js_path . '/' . $filename] = [
        'type' => 'internal',
        'minified' => FALSE,
      ];
    }
  }

  return $libraries;
}

/**
 * Return the default path to Kalastatic
 *
 * The assumption is that it is inside a folder called 'kalastatic' in the
 * current default theme.
 */
function kalastatic_path_to_src_default() {
  $default_theme = \Drupal::config('system.theme')->get('default');
  return drupal_get_path('theme', $default_theme) . '/kalastatic';
}

/**
 * Return the path to the default build folder.
 *
 * Grep the kalastatic.yml file inside of the Kalastatic src folder and work out
 * where it's being built to.
 */
function kalastatic_path_to_build_default() {
  // TODO: Work some yaml magic.
  return kalastatic_path_to_src_default() . '/build';
}

/**
 * Implements hook_preprocess_html().
 *
 * Adds any KalaStatic-specific variables to Twig.
 */
function kalastatic_preprocess_html(&$variables) {
  // Add the build_path global variable so Twig can use it.
  if (!isset($variables['build_path'])) {
    // TODO Figure out the true destination path from kalastatic.yaml.
    $variables['build_path'] = base_path() . 'kalastatic/';
  }
}

/**
* Prepare the variables from a text_with_summary field.
 */
function kalastatic_prepare_field__text_with_summary($field, $entity, $summary = FALSE) {
  $output = [];
  foreach ($entity->$field->getValue() as $i => $item) {
    $value = $summary ? $item['summary'] : $item['value'];
    $text = check_markup($value, $item['format']); // TODO: langcode, cache??
    $output[$i] = $text;
  }
  return _kalastatic_handle_field_delta($output);
}

/**
* Prepare the variables from a text_with_summary field.
 */
function kalastatic_prepare_field__text($field, $entity) {
  $output = [];
  foreach ($entity->$field->getValue() as $i => $item) {
    // Shouldn't need to sanitize because Twig?
    $output[$i] = $item['value'];
  }
  return _kalastatic_handle_field_delta($output);
}

/**
 * Prepare the variables from an image field, ready for the image.html.twig
 *
 * @param $field The name of the image field we are acting on.
 * @param $entity The entity that holds the image field.
 * @param $view_mode The view mode to prepare the image field with. If not
 *   provided, will use the default' view mode.
 */
function kalastatic_prepare_field__image($field, $entity, $view_mode = NULL) {
  $output = [];
  foreach ($entity->$field->getValue() as $i => $item) {
    if ($entity->get($field)->entity) {
      // Get the image url.
      $image = $entity->get($field)->entity;
      $image_uri = $entity->get($field)->entity->uri->value;

      // Load the entity display so we can work out which image style is set.
      $entity_type = $entity->getEntityTypeId();
      $entity_bundle = $entity->bundle();

      // Check that this view mode is enabled.
      // Note: there seems to be weirdness, with nodes anyway, about whether
      // 'default' and 'full' are the same thing. To cater for this we're
      // running this extra check to make sure the view mode is enabled before
      // trying to use it.
      $view_mode = kalastatic_view_mode_enabled($view_mode, $entity_type) ? $view_mode : 'default';

      $entity_display = entity_get_display($entity_type, $entity_bundle, $view_mode);
      $field_display = $entity_display->getComponent($field);
      $image_style = $field_display['settings']['image_style'];

      // Generate the url for the image.
      if ($image_style) {
        // There is an image style set in the config so let's use it.
        $image_url = ImageStyle::load($image_style)->buildUrl($image_uri);
      }
      else {
        // There is no image style set in the config so let's reference the
        // original.
        $image_url = file_create_url($image_uri);
      }
    }
    else {
      $image_url = '';
    }
    $output[$i] = [
      'url' => $image_url,
      'title' => $item['title'],
      'alt' => $item['alt'],
      'width' => $item['width'],
      'height' => $item['height'],
    ];
  }
  return _kalastatic_handle_field_delta($output);
}


/**
 * Prepare the variables from an image field, ready for the image.html.twig
 */
function kalastatic_prepare_field__entity_reference($field, $entity, $formatter) {
  $output = [];
  foreach ($entity->$field->referencedEntities() as $i => $item) {
    if ($formatter) {
      // Caller wants the referenced entites in a specific format.
      // TODO: Can we use actual field formatters/view modes somehow?
      $func = 'kalastatic_format_' . $formatter;
      $output[$i] = $func($item);
    }
    else {
      // Otherwise just return the whole entity for manual tinkering.
      $output[$i] = $item;
    }
  }
  return _kalastatic_handle_field_delta($output);
}

/**
 * Prepare the variables from a link field.
 */
function kalastatic_prepare_field__link($field, $entity) {
  $output = [];

  // Handle link field.
  foreach ($entity->$field->getValue() as $i => $item) {
    $output[$i] = array(
      'url' => $item['uri'],
      'text' => $item['title'],
      'attributes' => $item['_attributes'],
    );
  }

  return _kalastatic_handle_field_delta($output);
}

/**
 * Prepare the variables from an entity to make a link like Kalastatic wants.
 */
function kalastatic_format_entity_link($entity, $text = '') {
  // TODO: extend with other attributes.
  $url = $entity->toUrl()->toString();
  $text = $text ? $text : $entity->label();
  return kalastatic_format_link($url, $text);
}

/**
 * Prepare the variables to make a link like Kalastatic wants.
 */
function kalastatic_format_link($url, $text) {
  return array(
    'url' => $url,
    'text' => $text,
  );
}

/**
 * If there's only a single item then don't return a nested array.
 */
function _kalastatic_handle_field_delta($output) {
  return count($output) == 1 ? $output[0] : $output;
}

/**
 * Return boolean whether the given view mode is enabled for the given entity
 * type.
 */
function kalastatic_view_mode_enabled($view_mode, $entity_type) {
  $all_view_modes = \Drupal::service('entity_display.repository')->getViewModes($entity_type);
  $enabled = [];
  foreach ($all_view_modes as $name => $mode) {
    if ($mode['status']) {
      $enabled[] = $name;
    }
  }

  return in_array($view_mode, $enabled);
}
